<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Daniel Brunner: Posts tagged 'Common Lisp'</title>
 <link rel="self" href="http://www.dbrunner.de/feeds/Common-Lisp.atom.xml" />
 <link href="http://www.dbrunner.de/tags/Common-Lisp.html" />
 <id>urn:http-www-dbrunner-de:-tags-Common-Lisp-html</id>
 <updated>2014-07-24T07:41:36Z</updated>
 <entry>
  <title type="text">DateTime conversion can be tricky</title>
  <link rel="alternate" href="http://www.dbrunner.de/2014/07/24/datetime-conversion-can-be-tricky/" />
  <id>urn:http-www-dbrunner-de:-2014-07-24-datetime-conversion-can-be-tricky</id>
  <published>2014-07-24T07:41:36Z</published>
  <updated>2014-07-24T07:41:36Z</updated>
  <author>
   <name>Daniel Brunner</name></author>
  <content type="html">
&lt;p&gt;I wrote a small Lisp application and a JavaScript client gets some data from that application. All time stamps are returned as &amp;ldquo;Lisp&amp;rdquo; time stamps, i.e. an integer with seconds where zero equals Jan 01 1900.&lt;/p&gt;

&lt;p&gt;In the JS client the time stamp is then converted to JS time stamps, i.e. millisconds where zero equals Jan 01 1970.&lt;/p&gt;

&lt;p&gt;When testing the application I noticed that sometimes the displayed date is one day behind. For example in the data base I have Jan 05 1980 but in JavaScript I get a Jan 04 1980. But some other dates worked: A time stamp Jan 05 1970 was correctly converted to Jan 05 1970.&lt;/p&gt;

&lt;p&gt;I had a look into the JavaScript code and found:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;convA = function(ts) {
  tmp = new Date(ts*1000);
  tmp.setFullYear(tmp.getFullYear() - 70);
  return tmp.getTime();
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s likely the developer thought: &amp;ldquo;Well, it&amp;rsquo;s millisecond instead of second. Therefore I multiply by 1,000. But then I am 70 years in the future and I have to substract 70 years and everything will be ok.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;After thinking a while I came to the conclusion: Of course not!&lt;/p&gt;

&lt;p&gt;The developer made the assumption that there are as many leap years between 1900 and 1970 as between &lt;code&gt;ts&lt;/code&gt; and &lt;code&gt;ts+70&lt;/code&gt;. Obviously that assumption does not hold for all time stamps. And therefore sometimes the resulting JavaScript date is one day behind.&lt;/p&gt;

&lt;p&gt;So a better solution would be to substract all seconds between 1900 and 1970 from &lt;code&gt;ts&lt;/code&gt;, multiply by 1,000 and treat this as a JavaScript time stamp. Perhaps best would be to do the conversion in the Lisp process and only deliver a JavaScript-like time stamp.&lt;/p&gt;</content></entry>
 <entry>
  <title type="text">I learned something about symbols and packages</title>
  <link rel="alternate" href="http://www.dbrunner.de/2014/07/06/i-learned-something-about-symbols-and-packages/" />
  <id>urn:http-www-dbrunner-de:-2014-07-06-i-learned-something-about-symbols-and-packages</id>
  <published>2014-07-06T07:02:39Z</published>
  <updated>2014-07-06T07:02:39Z</updated>
  <author>
   <name>Daniel Brunner</name></author>
  <content type="html">
&lt;p&gt;I am using Common Lisp for developing a web application. Several days ago a new part of this application didn&amp;rsquo;t worked as supposed and I spent a considerable large amount of time in finding the bug. It was a very simple problem with symbols where I mixed something up.&lt;/p&gt;

&lt;p&gt;In the application the web server somewhen gets some JSON data from the browser. It is then converted to Lisp object using the &lt;code&gt;CL-JSON&lt;/code&gt; package. This package converts JSON objects to a-lists and converts the member keys to symbols (see CL-JSON&amp;rsquo;s &lt;a href="http://common-lisp.net/project/cl-json/"&gt;documentation&lt;/a&gt;. I then wanted to look something up in that a-list and failed.&lt;/p&gt;

&lt;p&gt;I wrote a small test case to show the effect and explain what went wrong.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(ql:quickload '("hunchentoot" "cl-who"))
;; direct loading via ql only for demonstration purposes, normally I
;; would use a asdf:defsystem for that.

(in-package :cl-user)

(defpackage :my-app (:use :cl))

(in-package :my-app)

(defparameter *my-a-list* 
  '((foo . 100)
    (bar . 200)))   ;; in the real application this a-list is
		    ;; generated by a JSON-to-lisp conversion by
		    ;; CL-JSON; in CL-JSON the object member keys are
		    ;; converted to symbols.

(defun get-value (key)
  "Returns the value with KEY from *MY-A-LIST*."
  (cdr (assoc (intern (string-upcase key)) *my-a-list*)))

(hunchentoot:define-easy-handler (web-get-value :uri "/get-value") (id)
  (cl-who:with-html-output-to-string (*standard-output* nil :prologue t)
    (:p (cl-who:fmt "Value of ~a is: ~a" id (get-value id)))))

(defun start ()
  (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port 4242)))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So on the REPL everything looks fine: &lt;code&gt;MY-APP&amp;gt; (get-value "foo")
100
MY-APP&amp;gt; (get-value "bar")
200
MY-APP&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But when I used my web browser to give me these results as well I got something strange.  For example here are some results when using curl: &lt;code&gt;~&amp;gt; curl http://localhost:4242/get-value?id=foo
&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&amp;gt;
&amp;lt;p&amp;gt;Value of foo is: NIL&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I was puzzled: The value is &lt;code&gt;NIL&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;After some debugging I found out that the easy handler from Hunchentoot runs with &lt;code&gt;*package*&lt;/code&gt; set to &lt;code&gt;COMMON-LISP-USER&lt;/code&gt; (and not to &lt;code&gt;MY-APP&lt;/code&gt; as I implicitly assumed). That means that &lt;code&gt;assoc&lt;/code&gt; looked up &lt;code&gt;COMMON-LISP-USER::FOO&lt;/code&gt; in the a-list where the keys are &lt;code&gt;MY-APP::FOO&lt;/code&gt; and &lt;code&gt;MY-APP::BAR&lt;/code&gt;.  And this test fails. Therefore &lt;code&gt;NIL&lt;/code&gt; is returned which is correct.&lt;/p&gt;

&lt;p&gt;So I rewrote the &lt;code&gt;get-value&lt;/code&gt; function to: &lt;code&gt;(defun get-value (key)
  "Returns the value with KEY from *MY-A-LIST*."
  (cdr (assoc (intern (string-upcase key)
		      (find-package :my-app)) *my-a-list*)))&lt;/code&gt; Now the symbols are interned in the same package and everything went well: &lt;code&gt;~&amp;gt; curl http://localhost:4242/get-value?id=foo
&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&amp;gt;
&amp;lt;p&amp;gt;Value of foo ist: 100&amp;lt;/p&amp;gt;

~&amp;gt; curl http://localhost:4242/get-value?id=bar
&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&amp;gt;
&amp;lt;p&amp;gt;Value of bar ist: 200&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Therefore I was reminded to think about packages when interning  symbols. A good guide to symbols and packages could be found in this  document: &lt;a href="http://www.flownet.com/gat/packages.pdf"&gt;The Complete Idiot&amp;rsquo;s Guide to Common Lisp Packages&lt;/a&gt;.&lt;/p&gt;</content></entry></feed>